#
#
#
#
# ██████╗ ██╗███████╗ ██████╗██╗      █████╗ ██╗███╗   ███╗███████╗██████╗
# ██╔══██╗██║██╔════╝██╔════╝██║     ██╔══██╗██║████╗ ████║██╔════╝██╔══██╗
# ██║  ██║██║███████╗██║     ██║     ███████║██║██╔████╔██║█████╗  ██████╔╝
# ██║  ██║██║╚════██║██║     ██║     ██╔══██║██║██║╚██╔╝██║██╔══╝  ██╔══██╗
# ██████╔╝██║███████║╚██████╗███████╗██║  ██║██║██║ ╚═╝ ██║███████╗██║  ██║
# ╚═════╝ ╚═╝╚══════╝ ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝
#
#
#
# ███╗   ██╗███████╗███████╗██╗    ██╗
# ████╗  ██║██╔════╝██╔════╝██║    ██║
# ██╔██╗ ██║███████╗█████╗  ██║ █╗ ██║
# ██║╚██╗██║╚════██║██╔══╝  ██║███╗██║
# ██║ ╚████║███████║██║     ╚███╔███╔╝
# ╚═╝  ╚═══╝╚══════╝╚═╝      ╚══╝╚══╝
#
#
# This file contains an abnormative vocabulary, abusive and offensive expressions
# or parts of such words, this is created in order to form the templates of prohibited words.
#
#
#
#
#
#



bad_words = [
    'хуй', 'хуи', 'хуя', 'хую', 'хуё', 'ху*',
    'ебл', 'ебу', 'ебат', 'ебан', 'еби', 'ебал',
    'пидор', 'пидр', 'пдр', 'педор', 'пидар',
    'пизд', 'пёзд', 'пезд',
    'соси', 'сосе', 'сосё', 'сосу', 'соса',
    'дроч', 'драч', 'дрюч',
    'член',
    'бля',
    'письк', 'писка',
    'шалав', 'шлюх'
    'dick', 'cock', 'gay', 'гей'
]

letters_swap = {
    'а': ['a', '@'],
    'б': ['b', 'd'],
    'в': ['v', 'w'],
    'г': ['g'],
    'д': ['d'],
    'е': ['e', 'ё'],
    'ё': ['e', 'е'],
    'ж': ['j'],
    'з': ['z'],
    'и': ['i', 'й', 'ii', 'u'],
    'й': ['и', 'i', 'ii', 'u'],
    'к': ['k'],
    'л': ['l', 'i'],
    'м': ['m'],
    'н': ['n', 'h'],
    'о': ['o', '0', '()'],
    'п': ['p'],
    'р': ['r', 'p'],
    'с': ['c', 's', '5'],
    'т': ['t', 'm'],
    'у': ['u', 'y'],
    'ф': ['f'],
    'х': ['h', 'x'],
    'ц': ['s', 'c'],
    'ч': ['ch', 'h', '4'],
    'ш': ['sh', 's', 'h', 'w'],
    'щ': ['sh', 's', 'h', 'w'],
    'ъ': ['b', 'ь'],
    'ы': ['i', 'bi', 'bl'],
    'ь': ['b', 'ъ'],
    'э': ['e', 'a', 'ea'],
    'ю': ['u', 'yu', 'y'],
    'я': ['y', 'ya', 'ia', 'a'],
}


def bad_words_variator(word: str):
    new_words = [word]
    super_new_words = []

    for letter in word:
        new_letters = letters_swap.get(letter)
        if not new_letters:
            new_letters = letter

        for new_word in new_words:
            for new_letter in new_letters:
                super_new_words.append(new_word.replace(letter, new_letter))

        new_words = new_words + super_new_words

    return new_words
